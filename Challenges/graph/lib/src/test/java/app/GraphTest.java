/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class GraphTest {
    Graph<Integer> testGraph;


    /*
    Add node test
     */

    @Test
    public void testAddNode(){
        testGraph = new Graph<>();

        testGraph.addNode(15);
        assertEquals(1 , testGraph.getNodes().size());
    }

    /*
    Test Add edge
     */

    @Test
    public void testAddEdge(){
        testGraph = new Graph<>();

        testGraph.addNode(10);
        testGraph.addNode(20);
        testGraph.addEdge(10,20 ,5);
        assertEquals(1 , testGraph.getNeighbours(10).size());
        assertEquals(1 , testGraph.getNeighbours(20).size());

    }

    /*
    test retrieve all nodes
     */
    @Test
    public void testGetAllNodes(){
        testGraph = new Graph<>();

        testGraph.addNode(10);
        testGraph.addNode(20);
        assertEquals(2 , testGraph.getNodes().size());
    }

    /*
    Test retrieving neighbours
     */

    @Test
    public void testGetNeighbours(){
        testGraph = new Graph<>();

        testGraph.addNode(10);
        testGraph.addNode(20);
        testGraph.addEdge(10 , 20 , 10);
        assertEquals(1 , testGraph.getNeighbours(10).size());
    }

    /*
        test weight
     */

    @Test
    public void testWeight(){
        testGraph = new Graph<>();

        testGraph.addNode(10);
        testGraph.addNode(20);
        testGraph.addEdge(10 , 20 , 5);
        assertEquals(5 , testGraph.nodes.get(10).get(20));
    }

    /*
    Test on node
     */

    @Test
    public void testOneNodeGraph(){
        testGraph = new Graph<>();

        testGraph.addNode(12);
        testGraph.addEdge(12 , 12 , 1);
        assertNotNull(testGraph);
    }

    /*
    Test size
     */

    @Test
    public void testSize(){
        testGraph = new Graph<>();

        testGraph.addNode(151);
        testGraph.addNode(154);
        testGraph.addNode(153);
        testGraph.addNode(152);
        testGraph.addEdge(151 ,  152 , 3);
        assertEquals(4 , testGraph.getSize());
    }

    /*
    Empty graph returns null
     */

    @Test
    public void testEmpty(){
        testGraph = new Graph<>();

        assertEquals(0 , testGraph.nodes.size());
    }

    @Test
    public void testBFV(){

        testGraph = new Graph<>();
        testGraph.addNode(1);
        testGraph.addNode(2);
        testGraph.addNode(3);
        testGraph.addEdge(1 , 2 ,0);
        testGraph.addEdge(2 , 3 ,0);

        assertEquals("[1, 2, 3]" , testGraph.BFV(1).toString());
    }
}
