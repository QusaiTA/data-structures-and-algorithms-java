/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import java.util.Arrays;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }


    public int[] insertionSort(int [] arr){
        for(int i = 1 ; i < arr.length ; i++){
            int j = i -1;
            int temp = arr[i]; //{8,4,23,42,16,15};
            while ( j >= 0 && temp < arr[j]){
                arr[j+1] = arr[j];
                j = j -1;
                arr[j+1] = temp;
            }
        }
        return arr;
    }


    public void mergeSort(int [] arr){

        int n = arr.length;
        if(n > 1){
            int mid = n/2;
            int [] left = Arrays.copyOfRange(arr,0,mid);
            int [] right = Arrays.copyOfRange(arr,mid,n);

            mergeSort(left);
            mergeSort(right);
            merge(left,right,arr);
        }
    }

    private void merge(int [] left, int [] right, int [] arr){

        int i =0;
        int j =0;
        int k =0;

        while(i <left.length && j <right.length){
            if(left[i] <= right[j]){
                arr[k] = left[i];
                i++;
            } else {
                arr[k] = right[j];
                j++;
            }
            k++;
        }

        if(i == left.length) {
            while (j < right.length) {
                arr[k] = right[j];
                k++;
                j++;
            }
        }
        else {
            while (i < left.length) {
                arr[k] = left[i];
                k++;
                i++;
            }
        }
    }

    public void QuickSort(int[] arr,int left,int right){
        if(left<right){
            int position=Partition(arr,left,right);
            QuickSort(arr,left,position-1);
            QuickSort(arr,position+1,right);
        }
    }
    public int Partition(int[] arr, int left, int right){
        int pivot=arr[right];
        int low=left-1;

        for (int i = left; i < right; i++) {
            if(arr[i]<=pivot){
                low++;
                swap(arr,i,low);
            }
        }
        swap(arr,right,low+1);
        return low+1;
    }

    public void swap(int[] arr,int i,int low){
        int temp;
        temp=arr[i];
        arr[i]=arr[low];
        arr[low]=temp;
    }


}
