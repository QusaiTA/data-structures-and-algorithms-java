/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import app.BinaryTree.BinaryTree;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class HashTable<K,V> {

    private ArrayList<HashNode<K,V>> bucketArray;
    private int numBuckets;
    private int size;

    public HashTable(){
        bucketArray = new ArrayList<>();
        numBuckets = 10;
        size = 0;

        for(int i = 0 ; i< numBuckets ; i++){
            bucketArray.add(null);
        }
    }

    public int getNumBuckets() {
        return numBuckets;
    }

    public int hashCode(K key){
        return Objects.hashCode(key);
    }

    //its also doing the job of hash method
    public int getBucketIndex(K key){
        int hashCode = hashCode(key);
        int index = hashCode % numBuckets;
        index = index < 0 ? index * -1 : index;

        return index;
    }

    public int getSize(){
        return size;
    }

    public Boolean isEmpty(){
        return getSize() == 0;
    }

    public void add( K key, V value){

        int bucketIndex = getBucketIndex(key);
        int hashCode = hashCode(key);

        HashNode<K, V> head = bucketArray.get(bucketIndex);

        while (head != null) {
            if (head.key.equals(key) && head.hashCode == hashCode) {
                head.value = value;
                return;
            }

            head = head.next;
        }

        size++;
        head = bucketArray.get(bucketIndex);
        HashNode<K, V> newNode = new HashNode<>(key, value, hashCode);
        newNode.next = head;
        bucketArray.set(bucketIndex, newNode);


        if ((1.0 * size) / numBuckets >= 0.7) {
            ArrayList<HashNode<K, V>> temp = bucketArray;
            bucketArray = new ArrayList<>();
            numBuckets = 2 * numBuckets;
            size = 0;

            for (int index = 0; index < numBuckets; index++) {
                bucketArray.add(null);
            }

            for (HashNode<K, V> headNode : temp) {
                while (headNode != null) {
                    add(headNode.key, headNode.value);
                    headNode = headNode.next;
                }
            }
        }

    }

    public V get(K key){

        int bucketIndex = getBucketIndex(key);
        int hashCode = hashCode(key);

        HashNode<K,V> head = bucketArray.get(bucketIndex);

        while(head != null){
            if(head.key.equals(key) && head.hashCode == hashCode){
                return head.value;
            }

            head = head.next;
        }

        return null;
    }

    public boolean contains(K key) {
        return get(key) != null;
    }

    public ArrayList<HashNode<K, V>> getBucketArray() {
        return bucketArray;
    }

    public String repeatedWord(String statement){
        HashTable<String , Integer> dictionary = new HashTable<>();
        statement = statement.toLowerCase();
        String[] words = statement.split("[\\p{Punct}\\s]+");
        for (String word : words){
            if( dictionary.contains(word))
                return word;
            else
                dictionary.add(word,1);
        }
        return null;
    }

    @Override
    public String toString() {
        return "HashTable{" +
                "\nbucketArray="  + bucketArray +
                ",\n numBuckets=" + numBuckets +
                ",\n size=" + size +
                '}';
    }
}

